## Get All Content Orders
<%
  wa_domain = config[:wa_domain] + '/api/project2s/:project_id/content_orders'
  token = config[:sample_token]
%>

This endpoint retrieves all content orders related to a project

### HTTP Request

`GET <%=wa_domain%>`

### Query Parameters

Parameter | Default | required | Description
--------- | ------- | -------- | -----------
project_id |  | true | Project Id to retrieve content orders.
fields | all | false | If set to all, the result will include all fields. Otwerwise fields should be comma seperated.

```shell
  curl -X GET \
  <%=wa_domain%> \
  -H 'accept: application/vnd.wordapp-v1+json' \
  -H 'authorization: Bearer <%=token%>' \
  -H 'cache-control: no-cache' \
  -H 'content-type: application/json' \
```

```php
  <?php

  $curl = curl_init();

  curl_setopt_array($curl, array(
    CURLOPT_URL => "<%=wa_domain%>",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "GET",
    CURLOPT_HTTPHEADER => array(
      "accept: application/vnd.wordapp-v1+json",
      "authorization: Bearer <%=token%>",
      "cache-control: no-cache",
      "content-type: application/json",
    ),
  ));

  $response = curl_exec($curl);
  $err = curl_error($curl);

  curl_close($curl);

  if ($err) {
    echo "cURL Error #:" . $err;
  } else {
    echo $response;
  }
```

```ruby
  require 'uri'
  require 'net/http'

  url = URI('<%=wa_domain%>')

  http = Net::HTTP.new(url.host, url.port)

  request = Net::HTTP::Get.new(url)
  request["authorization"] = 'Bearer <%=token%>'
  request["content-type"] = 'application/json'
  request["accept"] = 'application/vnd.wordapp-v1+json'
  request["cache-control"] = 'no-cache'

  response = http.request(request)
  puts response.read_body
```
```python
  import requests

  url = "<%=wa_domain%>"

  headers = {
      'authorization': "Bearer <%=token%>",
      'content-type': "application/json",
      'accept': "application/vnd.wordapp-v1+json",
      'cache-control': "no-cache",
      }

  response = requests.request("GET", url, headers=headers)

  print(response.text)
```

> The above commands returns JSON structured like this:

```json
{
  "status": 200,
  "errors": [],
  "data": {
    "items": [
      {
        "external_id": "",
        "keywords": [
          "chess"
        ],
        "keyword_substitutes": [
          ""
        ],
        "state": "approved",
        "updated_at": "2017-03-25T08:57:19.922Z",
        "created_at": "2017-03-07T13:18:16.062Z",
        "language": "en",
        "id": "<%=BSON::ObjectId.new.to_s%>",
        "pending_task": {
          "state": "submitted",
          "id": "<%=BSON::ObjectId.new.to_s%>",
          "actor": {
            "first_name": "Mehmet",
            "id": "<%=BSON::ObjectId.new.to_s%>"
          },
          "type": "ManagerTask"
        },
        "template": {
          "name": "Template",
          "id": "<%=BSON::ObjectId.new.to_s%>"
        },
        "domain": null,
        "project": {
          "name": "Zapier Project",
          "id": "<%=BSON::ObjectId.new.to_s%>"
        }
      }
    ]
  }
}
```
